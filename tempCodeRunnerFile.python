import networkx as nx
import matplotlib.pyplot as plt

# Definir las conexiones de los nodos y sus pesos (distancias)
branches = [
    {"StartNode": 5, "EndNode": 6, "Distance": 18},
    {"StartNode": 5, "EndNode": 7, "Distance": 67},
    {"StartNode": 5, "EndNode": 8, "Distance": 69},
    {"StartNode": 5, "EndNode": 9, "Distance": 54},
    {"StartNode": 5, "EndNode": 10, "Distance": 87},
    {"StartNode": 6, "EndNode": 5, "Distance": 18},
    {"StartNode": 6, "EndNode": 7, "Distance": 72},
    {"StartNode": 6, "EndNode": 8, "Distance": 52},
    {"StartNode": 6, "EndNode": 9, "Distance": 51},
    {"StartNode": 6, "EndNode": 10, "Distance": 97},
    {"StartNode": 7, "EndNode": 8, "Distance": 17},
    {"StartNode": 7, "EndNode": 9, "Distance": 31},
    {"StartNode": 7, "EndNode": 10, "Distance": 72},
    {"StartNode": 8, "EndNode": 7, "Distance": 17},
    {"StartNode": 8, "EndNode": 9, "Distance": 15},
    {"StartNode": 9, "EndNode": 7, "Distance": 31},
    {"StartNode": 9, "EndNode": 8, "Distance": 15},
    {"StartNode": 9, "EndNode": 10, "Distance": 69},
]

# Crear el grafo dirigido y añadir las aristas
G = nx.DiGraph()
for branch in branches:
    G.add_edge(
        branch["StartNode"],
        branch["EndNode"],
        weight=branch["Distance"]
    )

# Definir y añadir las aristas de la ruta más corta manualmente
shortest_path_branches = [
    {"StartNode": 1, "EndNode": 4, "Distance": 56},
    {"StartNode": 4, "EndNode": 6, "Distance": 45},
    {"StartNode": 6, "EndNode": 10, "Distance": 97}
]

# Añadir esta ruta más corta al grafo para destacarla
for branch in shortest_path_branches:
    G.add_edge(
        branch["StartNode"],
        branch["EndNode"],
        weight=branch["Distance"]
    )

# Probar dos layouts para dispersar los nodos
pos_spring = nx.spring_layout(G, seed=42, k=1.5, iterations=100)  # Ajuste para spring_layout
pos_kamada_kawai = nx.kamada_kawai_layout(G)  # Alternativa con kamada_kawai_layout

# Graficar ambos layouts para comparar
fig, ax = plt.subplots(1, 2, figsize=(20, 10))

# Graficar el layout con spring_layout ajustado
nx.draw_networkx_nodes(G, pos_spring, ax=ax[0], node_size=700, node_color="lightblue", edgecolors="black")
nx.draw_networkx_labels(G, pos_spring, ax=ax[0], font_size=10, font_color="black")
nx.draw_networkx_edges(G, pos_spring, ax=ax[0], edge_color="gray", width=1.5)
nx.draw_networkx_edges(G, pos_spring, ax=ax[0], edgelist=[(b["StartNode"], b["EndNode"]) for b in shortest_path_branches], edge_color="red", width=2)
nx.draw_networkx_edge_labels(G, pos_spring, ax=ax[0], edge_labels={(u, v): f"{d['weight']}" for u, v, d in G.edges(data=True)}, font_size=8, font_color="red")
ax[0].set_title("Disposición con spring_layout ajustado")
ax[0].axis("off")

# Graficar el layout con kamada_kawai_layout
nx.draw_networkx_nodes(G, pos_kamada_kawai, ax=ax[1], node_size=700, node_color="lightblue", edgecolors="black")
nx.draw_networkx_labels(G, pos_kamada_kawai, ax=ax[1], font_size=10, font_color="black")
nx.draw_networkx_edges(G, pos_kamada_kawai, ax=ax[1], edge_color="gray", width=1.5)
nx.draw_networkx_edges(G, pos_kamada_kawai, ax=ax[1], edgelist=[(b["StartNode"], b["EndNode"]) for b in shortest_path_branches], edge_color="red", width=2)
nx.draw_networkx_edge_labels(G, pos_kamada_kawai, ax=ax[1], edge_labels={(u, v): f"{d['weight']}" for u, v, d in G.edges(data=True)}, font_size=8, font_color="red")
ax[1].set_title("Disposición con kamada_kawai_layout")
ax[1].axis("off")

plt.show()
